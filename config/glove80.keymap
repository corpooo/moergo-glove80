/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

&mt { flavor = "tap-preferred"; };

// MOD MORPHS

/ {
    behaviors {
        amp_pipe: amp_pipe {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp AMPS>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lpar_at: lpar_at {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp LPAR>, <&kp AT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lbrc_under: lbrc_under {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp LEFT_BRACE>, <&kp UNDER>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lbkt_dllr: lbkt_dllr {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp LBKT>, <&kp DLLR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        equal_prcnt: equal_prcnt {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp EQUAL>, <&kp PRCNT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_plus: minus_plus {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp MINUS>, <&kp PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rbkt_star: rbkt_star {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp RBKT>, <&kp STAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rbrc_grave: rbrc_grave {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp RBRC>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpar_caret: rpar_caret {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp RPAR>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash_bslh: slash_bslh {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp SLASH>, <&kp BSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        colon_semi: colon_semi {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp COLON>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dqt_hash: dqt_hash {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DQT>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        qmark_excl: qmark_excl {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp QMARK>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

// HOME ROW MODS

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <53 54 55 56 69 70 71 72 73 52 57 74 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 72 73 74>;
        };

        hmr_colon: hmr_colon {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&colon_semi>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 72 73 74>;
        };
    };
};

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "BSPC_DEL";
        };

        comma_semicolon: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "COMMA_SEMICOLON";
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "DOT_COLON";
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_capsword {
            bindings = <&caps_word>;
            key-positions = <38 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2       &kp F3        &kp F4       &kp F5                                                                                                                                  &kp F6        &kp F7       &kp F8        &kp F9         &kp F10
&kp TILDE   &amp_pipe    &lpar_at      &lbrc_under  &lbkt_dllr    &equal_prcnt                                                                                                 &minus_plus  &rbkt_star    &rbrc_grave  &rpar_caret   &kp N0         &kp MINUS
&kp TAB     &kp Q        &kp W         &kp E        &kp R         &kp T                                                                                                        &kp Y        &kp U         &kp I        &kp O         &kp P          &kp BSLH
&kp SQT     &hml LALT A  &hml LCTRL S  &hml LCMD D  &hml LSHFT F  &kp G                                                                                                        &kp H        &hmr RSHFT J  &hmr RCMD K  &hmr LCTRL L  &hmr RALT DQT  &kp SQT
&kp GRAVE   &kp Z        &kp X         &kp C        &kp V         &kp B         &lt 5 SPACE  &mt LCTRL LG(SPACE)  &layer_td      &trans         &mt RCTRL ENTER  &lt 5 ESCAPE  &kp N        &kp M         &kp COMMA    &kp DOT       &slash_bslh    &qmark_excl
&magic 2 0  &kp F11      &dqt_hash     &kp LEFT     &kp RIGHT                   &lt 4 TAB    &mt LCMD LBKT        &mt LALT LBRC  &mt RALT RBRC  &mt RCMD RBKT    &bspc_del                  &kp DOWN      &kp UP       &qmark_excl   &kp F12        &magic 2 0
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                    &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 3
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        nums_layer {
            bindings = <
&trans  &trans  &trans    &trans    &trans                                                                     &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans    &trans    &trans     &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans    &kp UP    &trans     &trans                                                  &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans                                                  &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &trans    &trans    &trans     &trans  &trans  &trans  &trans  &trans  &trans  &kp N0  &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
&trans  &trans  &trans    &trans    &trans             &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        symbols {
            bindings = <
&trans  &trans          &trans           &trans          &trans                                                                                 &trans            &trans          &trans           &trans          &trans
&trans  &trans          &trans           &trans          &trans            &trans                                                     &trans    &trans            &trans          &trans           &trans          &trans
&trans  &kp HASH        &kp AT           &kp UNDER       &kp DLLR          &kp EXCL                                                   &trans    &kp ASTRK         &kp GRAVE       &kp QMARK        &kp CARET       &trans
&trans  &hml LALT AMPS  &hml LCTRL LPAR  &hml LCMD LBRC  &hml LSHIFT LBKT  &kp PRCNT                                                  &kp SEMI  &hmr RSHIFT RBKT  &hmr RCMD RBRC  &hmr LCTRL RPAR  &hmr RALT PIPE  &kp COLON
&trans  &kp SQT         &kp LESS_THAN    &kp EQUAL       &kp GT            &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans    &kp MINUS         &kp PLUS        &kp DQT          &kp BSLH        &trans
&trans  &trans          &trans           &trans          &trans                       &trans  &trans  &trans  &trans  &trans  &trans            &trans            &trans          &trans           &trans          &trans
            >;
        };

        navigation {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans            &trans    &trans  &trans     &trans  &trans
            >;
        };
    };
};
